(ns com.lemondronor.droneklv
  "Work with KLV metadata frome drone video."
  (:require [clojure.pprint :as pprint]
            [clojure.string :as string]
            [com.lemonodor.xio :as xio])
  (:import [com.lemondronor.droneklv KLV KLV$KeyLength KLV$LengthEncoding]
           [java.util Arrays]))

(set! *warn-on-reflection* true)


(defn ints->bytes
  [ints]
  (mapv (fn [i]
          (let [i (int i)]
            (byte
             (cond (<= 0 i 127)
                   i
                   (<= 128 i 255)
                   (- i 256)
                   :else
                   (throw (IllegalArgumentException.
                           (format "Value out of range for byte: %s" i)))))))
        ints))


(defn bytes->ints
  [bytes]
  (mapv (fn [i]
          (if (not (<= -128 i 127))
            (throw (IllegalArgumentException.
                    (format "Value out of range for byte: %s" i)))
            (bit-and 0xff (int i))))
        bytes))


;; Taken from
;; http://trac.osgeo.org/ossim/browser/trunk/ossimPredator/src/ossimPredatorKlvTable.cpp

(def tags
  [[:klv_key_stream_id
    "stream ID",
    [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x01 0x03 0x04 0x02 0x00 0x00 0x00 0x00]],
   [:klv_key_organizational_program_number "Organizational Program Number",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x01 0x03 0x05 0x01 0x00 0x00 0x00 0x00]],
   [:klv_key_unix_timestamp "UNIX Timestamp",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x04 0x07 0x02 0x01 0x01 0x01 0x05 0x00 0x00]],
   [:klv_key_user_defined_utc_timestamp "User Defined UTC" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x02 0x01 0x01 0x01 0x01 0x00 0x00]],
   [:klv_key_user_defined_timestamp_microseconds_1970 "User Defined Timestamp Microseconds since 1970" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x02 0x01 0x01 0x01 0x05 0x00 0x00]],
   [:klv_key_video_start_date_time_utc "Video Timestamp Start Date and Time",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x02 0x01 0x02 0x01 0x01 0x00 0x00]],
   [:klv_timesystem_offset "Time System Offset From UTC" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x03 0x01 0x03 0x03 0x01 0x00 0x00 0x00]],
   [:klv_uas_datalink_local_dataset "UAS Datalink Local Data Set",[0x06 0x0E 0x2B 0x34 0x02 0x0B 0x01 0x01 0x0E 0x01 0x03 0x01 0x01 0x00 0x00 0x00]],
   [:klv_basic_universal_metadata_set "Universal Metadata Set",[0x06 0x0E 0x2B 0x34 0x02 0x01 0x01 0x01 0x0E 0x01 0x01 0x02 0x01 0x01 0x00 0x00]],
   [:klv_security_metadata_universal_set "Security metadata universal set" [0x06 0x0E 0x2B 0x34 0x02 0x01 0x01 0x01 0x02 0x08 0x02 0x00 0x00 0x00 0x00 0x00]],
   [:klv_url_string "URL String" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x01 0x02 0x01 0x01 0x00 0x00 0x00 0x00]],
   [:klv_key_security_classification_set "Security Classification Set" [0x06 0x0E 0x2B 0x34 0x02 0x01 0x01 0x01 0x02 0x08 0x02 0x00 0x00 0x00 0x00 0x00]],
   [:klv_key_byte_order "Byte Order" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x03 0x01 0x02 0x01 0x02 0x00 0x00 0x00]],
   [:klv_key_mission_number"Mission Number",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x01 0x05 0x05 0x00 0x00 0x00 0x00 0x00]],
   [:klv_key_object_country_codes "Object Country Codes" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x20 0x01 0x02 0x01 0x01 0x00]],
   [:klv_key_security_classification "Security Classification" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x02 0x08 0x02 0x01 0x00 0x00 0x00 0x00]],
   [:klv_key_security_release_instructions "Release Instructions" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x20 0x01 0x02 0x09 0x00 0x00]],
   [:klv_key_security_caveats "Caveats" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x02 0x08 0x02 0x02 0x00 0x00 0x00 0x00]],
   [:klv_key_classification_comment "Classification Comment" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x02 0x08 0x02 0x07 0x00 0x00 0x00 0x00]],
   [:klv_key_original_producer_name "Original Producer Name" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x02 0x01 0x03 0x00 0x00 0x00 0x00 0x00]],
   [:klv_key_platform_ground_speed"Platform Ground Speed",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x01 0x01 0x05 0x00 0x00 0x00]],
   [:klv_key_platform_magnetic_heading_angle"Platform Magnetic Heading Angle",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x01 0x01 0x08 0x00 0x00 0x00]],
   [:klv_key_platform_heading_angle"Platform Heading Angle",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x07 0x07 0x01 0x10 0x01 0x06 0x00 0x00 0x00]],
   [:klv_key_platform_pitch_angle"Platform Pitch Angle",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x07 0x07 0x01 0x10 0x01 0x05 0x00 0x00 0x00]],
   [:klv_key_platform_roll_angle "Platform Roll Angle",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x07 0x07 0x01 0x10 0x01 0x04 0x00 0x00 0x00]],
   [:klv_key_indicated_air_speed "Platform Indicated Air Speed",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x01 0x01 0x0B 0x00 0x00 0x00]],
   [:klv_key_platform_designation "Platform Designation",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x01 0x01 0x20 0x01 0x00 0x00 0x00 0x00]],
   [:klv_key_platform_designation2 "Platform Designation",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x01 0x01 0x21 0x01 0x00 0x00 0x00 0x00]],
   [:klv_key_image_source_sensor "Image Source Sensor",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x04 0x20 0x01 0x02 0x01 0x01 0x00 0x00]],
   [:klv_key_image_coordinate_system "Image Coordinate System",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x01 0x01 0x00 0x00 0x00 0x00]],
   [:klv_key_sensor_latitude "Sensor Latitude",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x02 0x04 0x02 0x00]],
   [:klv_key_sensor_longitude "Sensor Longitude",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x02 0x06 0x02 0x00]],
   [:klv_key_sensor_true_altitude "Sensor True Altitude",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x02 0x01 0x02 0x02 0x00 0x00]],
   [:klv_key_sensor_horizontal_fov "Sensor Horizontal Field Of View",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x02 0x04 0x20 0x02 0x01 0x01 0x08 0x00 0x00]],
   [:klv_key_sensor_vertical_fov1 "Sensor Vertical Field Of View",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x07 0x04 0x20 0x02 0x01 0x01 0x0A 0x01 0x00]],
   [:klv_key_sensor_vertical_fov2 "Sensor Vertical Field Of View",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x04 0x20 0x02 0x01 0x01 0x0A 0x01 0x00]],
   [:klv_key_slant_range "Slant Range",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x08 0x01 0x01 0x00 0x00 0x00]],
   [:klv_key_obliquity_angle "Obliquity Angle",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x10 0x01 0x03 0x00 0x00 0x00]],
   [:klv_key_angle_to_north "Angle To North" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x10 0x01 0x02 0x00 0x00 0x00]],
   [:klv_key_target_width "Target Width",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x09 0x02 0x01 0x00 0x00 0x00]],
   [:klv_key_frame_center_latitude "Frame Center Latitude",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x02 0x01 0x03 0x02 0x00 0x00]],
   [:klv_key_frame_center_longitude "Frame Center Longitude",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x02 0x01 0x03 0x04 0x00 0x00]],
   [:klv_key_frame_center_elevation "Frame Center elevation",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x06 0x07 0x01 0x02 0x03 0x10 0x00 0x00 0x00]],
   [:klv_key_corner_latitude_point_1 "Corner Latitude Point 1",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x03 0x07 0x01 0x00]],
   [:klv_key_corner_longitude_point_1 "Corner Longitude Point 1",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x03 0x0B 0x01 0x00]],
   [:klv_key_corner_latitude_point_2 "Corner Latitude Point 2",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x03 0x08 0x01 0x00]],
   [:klv_key_corner_longitude_point_2 "Corner Longitude Point 2",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x03 0x0C 0x01 0x00]],
   [:klv_key_corner_latitude_point_3 "Corner Latitude Point 3",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x03 0x09 0x01 0x00]],
   [:klv_key_corner_longitude_point_3 "Corner Longitude Point 3",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x03 0x0D 0x01 0x00]],
   [:klv_key_corner_latitude_point_4 "Corner Latitude Point 4",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x03 0x0A 0x01 0x00]],
   [:klv_key_corner_longitude_point_4 "Corner Longitude Point 4",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x03 0x07 0x01 0x02 0x01 0x03 0x0E 0x01 0x00]],
   [:klv_key_device_absolute_speed "Device Absolute Speed",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x03 0x01 0x01 0x01 0x00 0x00]],
   [:klv_key_device_absolute_heading "Device Absolute Heading",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x03 0x01 0x01 0x02 0x00 0x00]],
   [:klv_key_absolute_event_start_date "Absolute Event Start Date",[0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x02 0x01 0x02 0x07 0x01 0x00 0x00]],
   [:klv_key_sensor_roll_angle "Sensor Roll Angle" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x07 0x01 0x10 0x01 0x01 0x00 0x00 0x00]],
   [:klv_key_sensor_relative_elevation_angle "Sensor Relative Elevation Angle" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x01 0x02 0x05 0x00 0x00 0x00]],
   [:klv_key_sensor_relative_azimuth_angle "Sensor Relative Azimuth Angle" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x01 0x02 0x04 0x00 0x00 0x00]],
   [:klv_key_sensor_relative_roll_angle "Sensor Relative Roll Angle" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x01 0x02 0x06 0x00 0x00 0x00]],
   [:klv_key_uas_lds_version_number "UAS LDS Version Number" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x02 0x03 0x03 0x00 0x00 0x00]],
   [:klv_key_generic_flag_data_01 "Generic Flag Data 01" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x01 0x03 0x01 0x00 0x00 0x00]],
   [:klv_key_static_pressure "Static Pressure" [0x06 0x0E 0x2B 0x34 0x01 0x01 0x01 0x01 0x0E 0x01 0x01 0x01 0x0F 0x00 0x00 0x00]]])

(def tags-table
  (map (fn [[sym name key]]
         [sym name (byte-array (ints->bytes key))])
       tags))


(defn find-klv-signature [^bytes key]
  (loop [tags tags-table]
    (if-let [tag (first tags)]
      (if (Arrays/equals ^bytes (tag 2) key)
        tag
        (recur (rest tags)))
      nil)))


(defn bytes->hex [^bytes data]
  (string/join
   " "
   (map #(format "%x" %) (bytes->ints data))))


(defn klvs-from-bytes [^bytes data]
  (KLV/bytesToList
   data
   0
   (count data)
   KLV$KeyLength/SixteenBytes
   KLV$LengthEncoding/BER))


(defn decode [^bytes data]
  (let [klvs (klvs-from-bytes data)]
    (map (fn [^KLV klv]
           (let [[tag desc _] (find-klv-signature (.getFullKey ^KLV klv))]
             (cond
               (nil? tag)
               "*Unknown*"
               (or (= tag :klv_basic_universal_metadata_set)
                   (= tag :klv_uas_datalink_local_dataset))
               [tag (decode (.getValue klv))]
               :else
               [tag (bytes->hex (.getValue klv))])))
         klvs)))


(defn -main [& args]
  (-> args
      first
      xio/binary-slurp
      decode
      pprint/pprint))
